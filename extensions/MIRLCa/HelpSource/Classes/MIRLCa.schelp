TITLE:: MIRLCa
summary:: A VA to interact with Freesound.org
categories:: Machine learning
related:: Classes/MIRLCRep2, Classes/FluidMLPClassifier, Freesound

DESCRIPTION::
MIRLCa is a SuperCollider extension that inherits from MIRLCRep2 class and expands its capabilities by proposing a virtual agent that embodies machine learning techniques.

CLASSMETHODS::

METHOD:: new
Creates a new instance. Extends the method from MIRLCRep2.

ARGUMENT:: backend
An link::Classes/Integer:: indicating the database used, default 0 to use the Freesound database.

ARGUMENT:: dbSize
An link::Classes/Integer:: indicating the size of the database in terms of the total number of sounds of the Freesound database.

ARGUMENT:: path
A link::Classes/String:: containing the path name where the sounds are downloaded (write mode).

ARGUMENT:: creditsPath
A link::Classes/String:: containing the path name where the sound credits list is stored (write mode).

ARGUMENT:: modelsPath
A link::Classes/String:: containing the path name where the models are loaded from (read mode).


INSTANCEMETHODS::

METHOD:: id

In performance mode, returns a sound by its Freesound ID number.

ARGUMENT:: id
An link::Classes/Integer:: indicating the Freesound ID number of a sound.

ARGUMENT:: size
An link::Classes/Integer:: that indicates the number of sounds to be retrieved. 

returns:: A link::Classes/FSSound:: sound

METHOD:: tag
In performance mode, returns the best candidate of a sound from Freesound that contains a requested tag.

ARGUMENT:: tag
A link::Classes/String:: that indicates the tag. 

ARGUMENT:: size
An link::Classes/Integer:: that indicates the number of sounds to be retrieved.

ARGUMENT:: cand
An link::Classes/Integer:: that indicates the number of candidates of 'good' sounds. Beware of the current maximum number 15.

returns:: A link::Classes/FSSound:: sound

METHOD:: random
In performance mode, returns the best candidate of a list of random sounds from Freesound.

ARGUMENT:: size
An link::Classes/Integer:: that indicates the number of sounds to be retrieved.

ARGUMENT:: cand
An link::Classes/Integer:: that indicates the number of candidates of 'good' sounds. Beware of the current maximum number 15.

returns:: A link::Classes/FSSound:: sound

METHOD:: similar
In performance mode, returns the best candidate of a list of similar sounds from Freesound given a target sound.

ARGUMENT:: targetnumsnd
An link::Classes/Integer:: that indicates the index number in the  EMPHASIS::metadata:: link::Classes/Array:: target sound to find a similar sound. 

ARGUMENT:: size
An link::Classes/Integer:: that indicates the number of sounds to be returned. Beware of the current limit to 1.

ARGUMENT:: cand
An link::Classes/Integer:: that indicates the number of candidates of 'good' sound. Beware of the current maximum number 14.

returns:: A link::Classes/FSSound:: sound

METHOD:: starttraining
Function to start training a data set.

ARGUMENT:: mode
A link::Classes/String:: indicating one of the following modes:

    definitionlist::
	 ## STRONG::"random"::
	 || Default value. Returns a random sound from Freesound. 
	 ## STRONG::"id"::
	 || Returns a sound by ID from Freesound. 
    ::

returns:: A link::Classes/FSSound:: sound

METHOD:: ok
In training mode, annotates the present sound as a 'good' sound as part of the training set.

METHOD:: ko
In training mode, annotates the present sound as a 'bad' sound as part of the training set.

METHOD:: skip
In training mode, skips the present sound to be in the training set.

METHOD:: trainrand
In training mode, retrieves a random sound to be annotated.

METHOD:: trainid
In training mode, retrieves a specific sound to be annotated.

ARGUMENT:: idnumber
An link::Classes/Integer:: indicating the Freesound ID number of a sound.

returns:: A link::Classes/FSSound:: sound

METHOD:: stoptraining
In training mode, stops the training process.

ARGUMENT:: perc
The threshold of the number of candidates for the training set vs the number of candidates for the testing set as a proportion value. Beware of the permitted ranges: 0.0-1.0. 

returns:: A link::Classes/String:: indicating the accuracy value in percentage (0%-100%)

METHOD:: save
In training mode, it saves the JSON files of the machine learning model generated.

returns:: Three JSON files of the type link::Classes/File::

METHOD:: continuetraining
In training mode, starts training again with the latest mode selected (either CODE::random:: or CODE::id::). Alternatively, the mode can be changed passing it as an argument.

ARGUMENT:: mode
A link::Classes/String:: indicating one of the following modes:

    definitionlist::
	 ## STRONG::"random"::
	 || Default value. Returns a random sound from Freesound. 
	 ## STRONG::"id"::
	 || Returns a sound by ID from Freesound. 
    ::

returns:: A link::Classes/FSSound:: sound, either by random or by sound ID

METHOD:: pause
In training mode, fades out the sound that is currently playing. Deprecated function since using  CODE::trainrand:: instead of the previous automatic process.

METHOD:: archive
In training mode, saves the training data to continue later.

METHOD:: load
In training mode, loads the saved training data to continue training.

METHOD:: showinfo
In training mode, shows status info about the dataset.

returns:: A link::Classes/String:: indicating the status.

PRIVATE:: initagent, fadeout_t, loadmetadata_t, getsoundfromfreesound, giverandomsound, getbestfromtarget, givesoundbyid, selectanswerbymode, getbest, pris, messagestraining, storeplaysound, updatedict

EXAMPLES::

subsection:: Setup and Instantiation

code::
(

// MIRLCa uses 3 directories to: 1) download the sounds from Freesound, 2) create a sound credits list text file with a list of all the used sounds in the performance and 3) load the 3 JSON files that represent the machine learning model and write the 3 JSON files in the training mode. 
// Before instantiating MIRLCa, it is recommended that you define the 3 paths. Please note: the directory should exist! The slash at the end is very important.
// 1) Directory to download the sounds from Freesound:

z = "/Users/anna/Desktop/MIRLCa-downloads/";

// 2) Directory to create a sound credits list text file with a list of all the used sounds during the live coding session:

y ="/Users/anna/Desktop/credits/";

// 3) Directory from where to load the 3 JSON files that represent the machine learning model and to save the generated 3 JSON files in the training mode. Please note that the three files "model.JSON", "pca.JSON" and "standardizer.JSON" should exist inside this folder.

x ="/Users/anna/Desktop/MIRLCa-default/";

File.mkdir(z); File.mkdir(y); File.mkdir(x);// This line will create the directory if it doesn't exist yet.

// Create an instance with defined paths
a = MIRLCa.new(path: z, creditsPath: y, modelsPath: x); 

// MIRLCa has two modes: 1) performance mode and 2) training mode.

)
::

subsection:: Performance Mode

code::
(

// Before using similar sound, you need a target sound, this can be a sound by ID, by tag or by random

a.id(31362)
a.id(3333) 

a.tag("footsteps")
a.tag("jack"+"plugin")

// For a random sound, you can define the number of candidates for the best random sound. The default value is 7. The larger the number, the more time it will take. Be patient.

a.random 

a.random(cand:10)
a.random(cand:4)

// Get a similar sound, it will pick the first "good" sound from a list of 14 candidates

a.similar

// If you have more than one sound in the collection, you can point the sound target using the index number of the sound in the collection
// e.g. if there were 3 sounds in group "a", and you want the third sound, the index is number 2. By default it will select the first number (index = 0).

// Therefore a.similar is the same than a.similar(0)

a.similar(1)

// You can build a step-by-step similarity group..

a.similar(2)

// You can apply the sound effects from MIRLC2 such as a low-pass filter

a.lowpf

// Or bypassing the effect...

a.bypass

// Check all the available sound effects on the HelpFile of MIRLCRep2

// Change the speed...

a.play(0.5)

// Go back to normal...

a.play

// Print the credits on the Post window 

a.credits

// And fadeout the group...

a.fadeout

)
::

subsection:: Training Mode

code::
(

// Start the training

a.starttraining

// To retrieve a random sound

a.trainrand 

// Or to retrieve a sound by ID number

a.trainid(3333)

// If you see any problems in the Post window, you can skip the sound

a.skip

// To annotate the sound: you need to wait until the sound is dowloaded, and then you need to execute the methods 'ok' or 'ko' depending on whether you like the sound or not. 


// If you like the sound, execute this command

a.ok

// If you don't like the sound, execute this command

a.ko

// Once you annotate the sound, you will need to tell what's the next sound you want to annotate by executing the methods 'trainrand' or 'trainid' until you stop training.

// Once you have trained some sounds, you can stop the training to check what is the accuracy result so far.   

a.stoptraining

// After this function is executed, you can either continue the training or save the results to JSON files.

// If you don't like the result, you can continue training

a.continuetraining 

// And then either

a.trainrand 

// Or

a.trainid(3334)

// You can always print the information of how many sounds you have annotated so far during the training session 

a.showinfo

// After stop training, if you are happy with the accuracy results, execute this command to save your results to JSON files.

a.save

)
::

